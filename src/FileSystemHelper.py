'''
Created on 5 Mar 2020

@author: pipertod
'''

import os
import hashlib
import zipfile
import tarfile
        
def list_all_files(path):
        """
        List all file paths
        @param path: if it is a path, just return, if dir, return paths of files in it
        Subdirectories not listed
        No recursive search
        """
        assert os.path.isfile(path) or os.path.isdir(path)

        if os.path.isfile(path):
            return [path]
        else:
            # return filter(os.path.isfile, map(lambda x: '/'.join([os.path.abspath(path), x]), os.listdir(path)))
        
            files = []
            # r=root, d=directories, f = files
            for r, d, f in os.walk(path):
                for file in f:
                    if os.path.isfile(os.path.join(r, file)):
                        files.append(os.path.join(r, file))
                    
            return files
        
def filename(path, stripExtension):
        _filename = os.path.basename(path)
        
        if stripExtension:
            splitFilename = _filename.rsplit(".")
            _filename = splitFilename[0]
            
        return _filename
    
def extension(filepath):
    filePathArray = os.path.splitext(filepath)
    
    if len(filePathArray) > 1:
        fileExtension = filePathArray[len(filePathArray)-1].lower()
        fileExtension = fileExtension.replace(".","")
        
        if fileExtension == 'gz':
            fileExtension = 'targz'
            
        print("Found extension: "+fileExtension)
    else:
        fileExtension = ""
        
    
    
    return fileExtension 
    
def sha256sum(filename):
        """
        Efficient sha256 checksum realization
        Take in 8192 bytes each time
        The block size of sha256 is 512 bytes
        """
        with open(filename, 'rb') as f:
            m = hashlib.sha256()
            while True:
                data = f.read(8192)
                if not data:
                    break
                m.update(data)
            return m.hexdigest()
        
def isTarball(filepath):
    
    fileExtension = extension(filepath)
    
    return (fileExtension == 'targz')

def isZipfile(filepath):
    
    archiveExtensions = ['zip','7z','whl']
    fileExtension = extension(filepath)
    
    return (fileExtension in archiveExtensions)

def isExecutable(filepath):
    
    archiveExtensions = ['exe','com','bat']
    fileExtension = extension(filepath)
    
    return (fileExtension in archiveExtensions)

def getArchiveMembers(filePath, fileInput):
    
    archiveMembers = None
    
    if zipfile.is_zipfile(filePath):
        archiveMembers = fileInput.namelist()

    elif tarfile.is_tarfile(filePath):
        archiveMembers = fileInput.getnames()
    
    else:
        raise Exception("No members found")
    
    return archiveMembers
    
def getArchiveData(filePath, fileInput, memberPath): 
    
    decodedData = None
    
    if zipfile.is_zipfile(filePath):
        encodedData = fileInput.read(memberPath)
        decodedData = "".join(map(chr, encodedData))

    elif tarfile.is_tarfile(filePath):
        print("Reading archive member :"+memberPath)
        bufferedReader = fileInput.extractfile(memberPath)
        
        if bufferedReader:
            encodedData = bufferedReader.read()
            decodedData = "".join(map(chr, encodedData))

    return decodedData