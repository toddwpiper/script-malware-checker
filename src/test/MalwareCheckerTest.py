'''
Created on 5 Mar 2020

@author: pipertod
'''
import unittest
from MalwareChecker import MalwareChecker
from virustotal.VirusTotal import VirusTotalClient
from test.TestHelper import TestHelper
import FileSystemHelper

class Test(unittest.TestCase):

    def setUp(self):
        
        self.testHelper = TestHelper()
        
        self.testHelper.setResponse_CleanReputation()
        
        self.logHandler = self.testHelper.getFileLogHandler("./logs/malware-checker-test.log")
        
        mockRequestHandler = self.testHelper.getMockRequestHandler()
        
        self.virusCheckerClient = VirusTotalClient(self.logHandler, mockRequestHandler)
        self.checker = MalwareChecker(self.logHandler, self.virusCheckerClient)
        
        self.testFiles = []
        self.testFiles.append('./testfiles/embedded-base64-script-test-file.py')
        self.testFiles.append('./testfiles/embedded-base64-script-test-file.js')
        self.testFiles.append('./testfiles/embedded-base64-script-test-file.r')
        self.testFiles.append('./testfiles/embedded-base64-script-test-file.txt')
        self.testFiles.append('./testfiles/safe-test-file.py')
        self.testFiles.append('./testfiles/safe-test-file.js')
        self.testFiles.append('./testfiles/safe-test-file.r')
        self.testFiles.append('./testfiles/safe-test-file.txt')
        self.testFiles.append('./testfiles/r-package.zip')
        self.testFiles.append('./testfiles/nested-archive.zip')
        self.pythonWheelFile = "./testfiles/jmespath-0.9.4-py2.py3-none-any.whl"
        self.rZipFile = "./testfiles/r-package.zip"
        self.pyTarFile = "./testfiles/fasttext-0.9.1.tar.gz"
        
        
    def tearDown(self):
        pass

    def testMultipleMalwareFiles(self):
        
        self.testHelper.setResponse_MalwareReputation()
        
        responseData = self.checker.fileChecks(self.testFiles, True)
        
        for filePath in self.testFiles:
            self.assertMalware(responseData, filePath)
        
    def testSingleSafeFiles(self):
        
        self.testHelper.setResponse_CleanReputation()
        
        responseData = self.checker.fileChecks(['./testfiles/safe-test-file.r'], True)
        
        self.assertClean(responseData, './testfiles/safe-test-file.r')
        
    def testSingleSuspiciousFile(self):
        
        self.testHelper.setResponse_CleanReputation()
        
        responseData = self.checker.fileChecks(['./testfiles/embedded-base64-script-test-file.r'], True)
        
        self.assertSuspicious(responseData, './testfiles/embedded-base64-script-test-file.r')
        
    def assertMalware(self, responseData, filepath):
        
        assert responseData
        
        assert responseData.isMalwareFilesDetected()
        
        fileChecks = responseData.getMalwareFiles()
            
        assert len(fileChecks) > 0
        
        assert filepath in fileChecks        
        
        fileCheck = responseData.getFileCheck(filepath)
            
        assert fileCheck.isMalware()
        
    def assertSuspicious(self, responseData, filepath):
        
        assert responseData
        
        assert responseData.isSuspiciousFileDetected()
        
        fileChecks = responseData.getSuspiciousFiles()
            
        assert len(fileChecks) > 0
        
        assert filepath in fileChecks        
        
        fileCheck = responseData.getFileCheck(filepath)
            
        assert fileCheck.isSuspicious()
        
    def assertClean(self, responseData, filepath):
        
        print("Checking file: "+filepath)
        
        assert responseData
        
        fileChecks = responseData.getCleanFiles()
            
        assert len(fileChecks) > 0
        
        assert filepath in fileChecks        
        
        fileCheck = responseData.getFileCheck(filepath)
            
        assert not fileCheck.isSuspicious()
        assert not fileCheck.isMalware()
        assert fileCheck.isReputation()
        
    def assertNoReputation(self, responseData, filepath):
        
        assert responseData
        
        assert responseData.isNoReputationFilesDetected()
        
        fileChecks = responseData.getNoReputationFiles()
            
        assert len(fileChecks) > 0
        
        assert filepath in fileChecks        
        
        fileCheck = responseData.getFileCheck(filepath)
            
        assert not fileCheck.isSuspicious()
        assert not fileCheck.isMalware()
        assert not fileCheck.isReputation()
        
    def testSingleMalwareFile(self):
        
        self.testHelper.setResponse_MalwareReputation()
        
        responseData = self.checker.fileChecks(['./testfiles/safe-test-file.r'], True)
        
        self.assertMalware(responseData, './testfiles/safe-test-file.r')
        
    def testPythonMalwareArchiveFile(self):
        
        self.testHelper.setResponse_MalwareReputation()
        
        responseData = self.checker.fileChecks([self.pythonWheelFile], True)
        
        self.assertMalware(responseData, self.pythonWheelFile)
        
    def testRMalwareArchiveFile(self):
        
        self.testHelper.setResponse_MalwareReputation()
        
        responseData = self.checker.fileChecks([self.rZipFile], True)
        
        self.assertMalware(responseData, self.rZipFile)
        
    def testCleanPythonTarFile(self):
        
        self.testHelper.setResponse_CleanReputation()
        
        responseData = self.checker.fileChecks([self.pyTarFile], True)
        
        self.assertClean(responseData, self.pyTarFile)
        
    def testNoRepPythonTarFile(self):
        
        self.testHelper.setResponse_NoReputation()
        
        responseData = self.checker.fileChecks([self.pyTarFile], True)
        
        self.assertNoReputation(responseData, self.pyTarFile)
        
    def testGenerateReport(self):
        
        self.testHelper.setResponse_MalwareReputation()
        
        responseData = self.checker.fileChecks(self.testFiles, True)
        
        self.checker.writeReport(None, responseData)
        
        self.checker.writeReport("./reports/generate-reports.json", responseData)
        
    def testRLibDirectory(self):
        
        filepathsIterator = FileSystemHelper.list_all_files("./testfiles/r-packages")
        
        reputationCheck = True
                
        self.testHelper.setResponse_CleanReputation()
        
        responseData = self.checker.fileChecks(filepathsIterator, reputationCheck)
        
        for filePath in filepathsIterator:
            self.assertClean(responseData, filePath)
            
        self.checker.writeReport("./reports/generate-reports.json", responseData)
            
    def testSingleSafeRFiles(self):
        
        self.testHelper.setResponse_CleanReputation()
        
        responseData = self.checker.fileChecks(['./testfiles/r-packages/fastTextR/R/fastTextR'], True)
        
        self.assertClean(responseData, './testfiles/r-packages/fastTextR/R/fastTextR')
        
def serialize(obj):
    """JSON serializer for objects not serializable by default json code"""

    return obj.__dict__

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()