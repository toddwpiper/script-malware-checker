'''
Created on 5 Mar 2020

@author: pipertod
'''
import unittest
from ScriptChecker import ScriptChecker 
from FileCheck import FileCheck
import json

class Test(unittest.TestCase):


    def setUp(self):
        self.checker = ScriptChecker()

    def tearDown(self):
        pass

    def testSuspiciousPythonFile(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/embedded-base64-script-test-file.py")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 1
        
        fileCheck = FileCheck()
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
    def testSuspiciousJavascriptFile(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/embedded-base64-script-test-file.js")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 1
        
        fileCheck = FileCheck()
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
    def testSuspiciousRFile(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/embedded-base64-script-test-file.r")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 1
        
        fileCheck = FileCheck()
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
    def testSuspiciousUnknownFiletype(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/embedded-base64-script-test-file.txt")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 3
        
        fileCheck = FileCheck("./testfiles/embedded-base64-script-test-file.txt")
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
        
    def testSafePythonFile(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/safe-test-file.py")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 1
        
        fileCheck = FileCheck("./testfiles/safe-test-file.py")
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert not fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
    def testSafeJavascriptFile(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/safe-test-file.js")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 1
        
        fileCheck = FileCheck("./testfiles/safe-test-file.js")
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert not fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
    def testSafeUnknownFileType(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/safe-test-file.txt")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 3
        
        fileCheck = FileCheck("./testfiles/safe-test-file.txt")
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert not fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)
        
    def testSafeRFile(self):
        fileCheckResults = self.checker.checkFile(filepath="./testfiles/safe-test-file.r")
        
        assert fileCheckResults
        
        assert len(fileCheckResults) == 1
        
        fileCheck = FileCheck("./testfiles/safe-test-file.r")
        fileCheck.addScriptChecks(fileCheckResults);
        
        assert not fileCheck.isSuspicious()
        
        jsonStr = json.dumps(fileCheck, default=serialize)
        
        print("ResponseData: \n"+jsonStr)

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
    
def serialize(obj):
    """JSON serializer for objects not serializable by default json code"""

    return obj.__dict__