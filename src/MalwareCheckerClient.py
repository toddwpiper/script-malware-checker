#!/usr/bin/env python3
# This script is to perform malware checks on Python Modules and R Packages

import os
import logging
import argparse
import FileSystemHelper

from MalwareChecker import MalwareChecker
from virustotal.VirusTotal import VirusTotalClient
    
if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Malware Check')
    parser.add_argument("-f", "--filepath", help="Filepath to a file to check")
    parser.add_argument("-d", "--directory", help="Directory to recursively check all files in directories")
    parser.add_argument("-ln", "--libraryname", help="A Library name to check reputation")
    parser.add_argument("-l", "--language", help="Type of scripting language. Only Python and R are currently supported")
    parser.add_argument("-o", "--output", help="output repot file path")
    parser.add_argument("-lf", "--logfile", help="logfile path")
    
    args = parser.parse_args()
    
    if args.logfile:
        if not os.path.exists(args.logfile):
            logfile=open(args.logfile,"w+")
            logfile.write("MalwareChecker LogFile")
            logfile.close()
        
        logfilehandler = logging.FileHandler(args.logfile)
    else:
        #Defaut Logfile
        logfile = logging.FileHandler("./logs/malware-check.log")
    
    logfilehandler.setFormatter(logging.Formatter("[%(asctime)s %(levelname)s] %(message)s", datefmt="%m/%d/%Y %I:%M:%S"))
    
    #Client Inits    
    vtClient = VirusTotalClient(logfilehandler, None)
    checker = MalwareChecker(logfilehandler, vtClient)
    
    # system init end, start to perform operations
    checker.logger.info("Performing malware checks")

    if args.filepath:
        checker.logger.info("Performing malware checks")
        
        filepaths = FileSystemHelper.list_all_files(args.filepath)
        
        reputationCheck = True
        
        if args.language == "R":
            reputationCheck = False
        
        fileCheckResponse = checker.fileChecks(filepaths, reputationCheck=reputationCheck)
        
        checker.writeReport(args.output, fileCheckResponse)

    if args.directory:
        checker.logger.info("Checking directory %s",args.directory)
        
        filepathsIterator = FileSystemHelper.list_all_files(args.directory)
        
        reputationCheck = True
        
        if args.language == "R":
            print("Excluding repurtation checks for R Libs")
            reputationCheck = False
            
        print("Checking %d files", len(filepathsIterator))
        
        fileCheckResponse = checker.fileChecks(filepathsIterator, reputationCheck=reputationCheck)
        
        checker.writeReport(args.output, fileCheckResponse)

    if args.libraryname:
        checker.libraryReputationCheck(args.libraryname)
    
  
