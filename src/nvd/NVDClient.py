#!/usr/bin/env python3

""" NVD File Scan
    Required libraries:
        - requests (can be installed manually or through pip)
        
    Common File Check Methods
    * sendFile(filename) returns FileReputationCheckResult
    * checkFileHash(fileHash) returns FileReputationCheckResult
    * hasMalware(responseText)
    
    Doco found at https://csrc.nist.gov/CSRC/media/Projects/National-Vulnerability-Database/documents/web%20service%20documentation/Automation%20Support%20for%20CVE%20Retrieval.pdf
"""

import sys
import os
import logging
import requests
import json
from FileCheckResult import FileCheckResult
import FileSystemHelper
from pathlib import Path
from time import sleep

class NVDClient(object):
    
    def __init__(self, logHandler, nvdRequestHandler):
        
        self.logger = logging.getLogger("virt-log")
        self.logger.setLevel(logging.INFO)
        self.scrlog = logging.StreamHandler()
        self.scrlog.setFormatter(logging.Formatter("[%(levelname)s] %(message)s"))
        self.logger.addHandler(self.scrlog)
        self.logger.addHandler(logHandler)
        self.is_verboselog = True
            
        if nvdRequestHandler:
            
            #Allows for Mocking
            self.requestHandler = nvdRequestHandler
            
        else:
            self.requestHandler = nvdRequestHandler(self.logger)

        self.HTTP_OK = 200
        
        # whether the API_KEY is a public API. limited to 4 per min if so.
        self.is_public_api = True
        
    def getName(self):
        return "nvd.com"
    
    def isFileKnown(self, reportMap):
        
        totalResults = reportMap['totalResults']
        
        return (totalResults)
    
    def checkFileHash(self, filepath):
        
        """
        Retrieve Report for file
        @param filename: target file
        """
        fileHash = FileSystemHelper.sha256sum(filepath)
        
        res = self.requestHandler.retrieve_report(fileHash)
        
        if res.status_code == self.HTTP_OK:
            
            self.logger.info("sent: %s, HTTP: %d, content: %s", os.path.basename(filepath), res.status_code, res.text)
            
            reportMap = json.loads(res.text)
            
            fileCheckResult = self.buildFileCheckResult(filepath, reportMap)
            
            return fileCheckResult
        
        else:
            raise Exception("sent: " + os.path.basename(filepath) + ", HTTP: " + res.status_code)
        
    def checkLibraryName(self, libraryName):
        
        res = self.requestHandler.retrieve_report(libraryName)
        
        if res.status_code == self.HTTP_OK:
            
            self.logger.info("sent: %s, Library: %d, content: %s", libraryName, res.status_code, res.text)
            
            reportMap = json.loads(res.text)
            
            fileCheckResult = self.buildFileCheckResult(libraryName, reportMap)
            
            return fileCheckResult
        
        else:
            raise Exception("sent: " + libraryName + ", HTTP: " + res.status_code)
    
    def buildFileCheckResult(self, libraryName, reportMap):
        
        knownFile = self.isFileKnown(reportMap)
        
        malware = False
        suspicious = False
        hasReputation = False;
        
        results = {}
        results['scansPerformedCount'] = 0
        results['knownFile'] = knownFile
        
        if knownFile:
            
            results['scansPerformedCount'] = 1
            
            positives = reportMap['totalResults']
            hasReputation = True;
             
            if positives > 0:
                
                self.logger.warn("!!!Malware Detected in %s", libraryName)
                
                malware = True
                
                #Add scans to results
                positiveScans = {}
                cveItems = reportMap['result']['CVE_Items']
        
                for cveItem in cveItems:
                    
                    
                    scan = scans[scanName]
            
                    if scan['detected']:
                        positiveScans[scanName] = scan
        else:
            self.logger.warn("!!!File has no reputation %s", filepath)
                
        return FileCheckResult(checkName=self.getName(),filepath=filepath,checkResult=results,suspicious=suspicious,malware=malware,reputation=hasReputation)
    
class NVDRequestHandler(object):
    
    def __init__(self, logger):
        self.HTTP_LIMIT_EXCEEDED = 204
        self.PUBLIC_API_SLEEP_TIME = 20
        self.URL_BASE = "https://services.nvd.nist.gov/rest/json/cves/1.0"
        self.logger = logger
            
    def retrieve_report(self, searchTerm):
        
        url = self.URL_BASE + "?keyword="+searchTerm+"&isExactMatch=true"
                
        backOffCount = 0
        backOffMaxCount = 3
        
        res = requests.post(url)
        
        while backOffCount <= backOffMaxCount and res.status_code == self.HTTP_LIMIT_EXCEEDED:
                    
            backOffCount = backOffCount + 1 
            backOffSeconds = (65 * backOffCount)
            
            self.logger.warn("Request limit reached (4 per minute). Backing off for %d second", backOffSeconds)
            
            sleep(backOffSeconds)
            res = requests.post(url)
                    
        return res
    
    def retrieve_from_meta(self, filename):
        """
        Retrieve Report for checksums in the metafile
        @param filename: metafile, each line is a checksum, best use sha256
        """
        with open(filename) as f:
            for line in f:
                checksum = line.strip()
                res = self.retrieve_report(checksum)

                if res.status_code == self.HTTP_OK:
                    resmap = json.loads(res.text)
                    if not self.is_verboselog:
                        self.logger.info("retrieve report: %s, HTTP: %d, response_code: %d, scan_date: %s, positives/total: %d/%d",
                                checksum, res.status_code, resmap["response_code"], resmap["scan_date"], resmap["positives"], resmap["total"])
                    else:
                        self.logger.info("retrieve report: %s, HTTP: %d, content: %s", os.path.basename(filename), res.status_code, res.text)
                else:
                    self.logger.warning("retrieve report: %s, HTTP: %d", checksum, res.status_code)
    
    