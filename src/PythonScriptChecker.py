'''
Created on 6 Mar 2020

@author: pipertod
'''
import re
from re import RegexFlag

class PythonScriptChecker(object):
    '''
    classdocs
    '''

    def __init__(self, base64RegexObject):
        '''
        Constructor
        '''
        self.lines = []
        self.startTagLineIndex = -1
        self.endTagLineIndex = -1
        self.base64RegexObject = base64RegexObject
        self.systemRegexObject = re.compile(r'(.*?system.*?)\n')
        self.osRegexObject = re.compile(r'(.*?os.*?)\n')
        self.suspicious = False
        self.base64KeywordFoundInFile = False
        self.language = "Python"
        self.fileExtensions = ["py","py3","pyc","pyo","pyw","pyx","pyd","pxd","pyi","pyz","pywz","rpy","pyde","pyp","pyt","xpy","ipynb"]
        self.archiveExtensions = ["whl"]
        
    def isFile(self, fileExtension):
        return (fileExtension in self.fileExtensions) 
        
    def isArchive(self, fileExtension):
        return (fileExtension in self.archiveExtensions)
        
    def getLanguage(self):
        return self.language
        
    def checkLine(self, lineText):
        
        base64Results = self.base64RegexObject.search(lineText, RegexFlag.IGNORECASE)
        systemResults = self.systemRegexObject.search(lineText, RegexFlag.IGNORECASE)
        osResults = self.osRegexObject.search(lineText, RegexFlag.IGNORECASE)
        
        # Record the line in the file that mentions base64
        if base64Results:
            self.base64KeywordFoundInFile = True
            self.lines.append(lineText)
                
        if self.base64KeywordFoundInFile and (systemResults or osResults):
            self.suspicious = True
            self.lines.append(lineText)
        
        elif (systemResults and osResults):
            self.suspicious = True
            self.lines.append(lineText)
        
    def isSuspicious(self):
        return self.suspicious
    
    def getLines(self):
        return self.lines
        
        
        