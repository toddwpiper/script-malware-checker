#!/usr/bin/env python3
# This script is to perform malware checks on Python Modules and R Packages

import logging
import zipfile
from zipfile import ZipFile
import tarfile
from tarfile import TarFile
import FileSystemHelper
import argparse
from ScriptChecker import ScriptChecker
import json
from virustotal.VirusTotal import VirusTotalClient
from FileCheckResponse import FileCheckResponse
from FileCheck import FileCheck
from datetime import datetime
from FileCheckResult import FileCheckResult
import sys
from sys import executable

class MalwareChecker(object):
    def __init__(self, fileLogHandler, virusTotalClient):
        
        self.reputationServices = [virusTotalClient]
        self.scriptChecker = ScriptChecker()

        self.logger = logging.getLogger("malware-checker-log")
        self.logger.setLevel(logging.INFO)
        self.scrlog = logging.StreamHandler()
        self.scrlog.setFormatter(logging.Formatter("[%(levelname)s] %(message)s"))
        self.logger.addHandler(self.scrlog)
        self.logger.addHandler(fileLogHandler)
        self.is_verboselog = False
        
    """
        returns FileCheckResponse
    """
    def fileChecks(self, filepaths, reputationCheck):
        
        responseData = FileCheckResponse()
        
        # pre build all file objects
        for filepath in filepaths:
            
            try:
            
                fileCheck = FileCheck(filepath)
            
                """
                    Reputation Checks
                """
                if reputationCheck:
                    repFileCheckResults = self.fileReputationCheck(filepath)
            
                    fileCheck.addReputationChecks(repFileCheckResults)
            
                # Check if its an compressed file
                if tarfile.is_tarfile(filepath):
            
                    """
                        Script Archive Checks
                    """    
                    with tarfile.open(filepath) as archiveFileInput:
                        self.scriptArchiveCheck(filepath, archiveFileInput, fileCheck)
                    
                elif zipfile.is_zipfile(filepath):
            
                    """
                        Script Archive Checks
                    """    
                    with ZipFile(filepath, 'r') as archiveFileInput:
                        self.scriptArchiveCheck(filepath, archiveFileInput, fileCheck)
                
                else:
                
                    """
                        Script File Checks
                    """
                    with open(filepath, 'r') as fileInput:
                        scriptFileCheckResults = self.scriptCheck(filepath, fileInput)
                        fileCheck.addScriptChecks(scriptFileCheckResults)
                    
                responseData.addFileCheck(fileCheck)
                
            except:
                e = sys.exc_info()[0]
                raise Exception("Failed to check file ["+filepath+"]: %s", e)
            
        return responseData
        
    
    def scriptArchiveCheck(self, archiveFilepath, archiveFileinput, fileCheck):
        
            self.logger.info("Script Archive Checks for %s", archiveFilepath)
        
            fileCheck.setArchive(True)
                
            #Open Input Stream
            for archiveMemberPath in FileSystemHelper.getArchiveMembers(archiveFilepath, archiveFileinput):
                
            #For each file in compressed file run Script Checker    
                if not archiveMemberPath.endswith("/"):
                    
                    decodedData = FileSystemHelper.getArchiveData(archiveFilepath, archiveFileinput, archiveMemberPath)
                    
                    if decodedData:
                    
                        absolutePath = archiveFilepath+"/"+archiveMemberPath
                    
                        if FileSystemHelper.isZipfile(absolutePath):
                            self.logger.info("Script Nested Archive Level Checks for %s", absolutePath)
        
                            archiveFileCheckResult = FileCheckResult(filepath=absolutePath, checkName="NestedArchiveCheck", checkResult="This is a nested archive file", suspicious=True, malware=False, reputation=False)
                            fileCheck.addScriptChecks([archiveFileCheckResult])
                                                
                        else:
                            self.logger.info("Checking %s", absolutePath)

                            scriptFileCheckResults = self.scriptCheck(absolutePath, decodedData)

                            fileCheck.addScriptChecks(scriptFileCheckResults)
        
    def fileReputationCheck(self, filepath):
        
        self.logger.info("Reputation Checking: " + filepath)
        
        fileCheckResults = []
        
        # Execute Checks on filepathArray
        for reputationService in self.reputationServices:
            
            self.logger.info("Checking %s", reputationService.getName())

            fileCheckResult = reputationService.checkFileHash(filepath)
            
            fileCheckResults.append(fileCheckResult)
            
        return fileCheckResults
            
    def scriptCheck(self, filepath, fileInput):
        
        self.logger.info("Suspicious Script Checking: " + filepath)
        
        fileCheckResults = self.scriptChecker.checkFileInput(filepath=filepath, fileInput=fileInput)
        
        return fileCheckResults
    
    def libraryChecks(self, filepaths):
        response = []
        response['Libraries'] = []
        
        self.libraryReputationCheck(filepaths)
    
    def libraryReputationCheck(self, libraryNames):
        
        response = []
        response['Libraries'] = []
        
        for libraryName in libraryNames:
            self.logger.info("Reputation Checking: " + libraryName)
            
            # Execute Check
            status = "Not checked"
            response['Libraries'][libraryName] = status 
        
        return response
    
    def writeReport(self, reportFilepath, responseData):
        responseDataString = json.dumps(responseData,default=serialize, indent=2)
    
        now = datetime.now()
        nowStr = now.strftime("%Y%m%d%H%M%S")
    
        filePath = ("./reports/malware-check-report-"+nowStr+".json")
    
        if reportFilepath:
            filePath = (reportFilepath)
        
        outputFile = open(filePath, "w+")
        outputFile.write(responseDataString)
        outputFile.close()
    
def serialize(obj):
    """JSON serializer for objects not serializable by default json code"""

    return obj.__dict__

    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Malware Check')
    parser.add_argument("-f", "--filepath", help="Filepath to a file to check")
    parser.add_argument("-d", "--directory", help="Directory to recursively check all files in directories")
    parser.add_argument("-ln", "--libraryname", help="A Library name to check reputation")
    parser.add_argument("-l", "--language", help="Tyep of scripting language. Only Python and R are currently supported")
    parser.add_argument("-o", "--output", help="report output file in json")
    
    args = parser.parse_args()
    
    filelog = logging.FileHandler("./logs/malware-check.log")
    filelog.setFormatter(logging.Formatter("[%(asctime)s %(levelname)s] %(message)s", datefmt="%m/%d/%Y %I:%M:%S"))
        
    vtClient = VirusTotalClient(filelog, None)
    
    checker = MalwareCheckerClient(filelog, vtClient)
    
    # system init end, start to perform operations
    checker.logger.info("Performing malware checks")

    if args.filepath:
        checker.logger.info("Performing malware checks")
        
        filepaths = FileSystemHelper.list_all_files(args.filepath)
        
        reputationCheck = True
        
        if args.language == "R":
            reputationCheck = False
        
        fileCheckResponse = checker.fileChecks(filepaths, reputationCheck=reputationCheck)
        
        checker.writeReport(args.output, fileCheckResponse)

    if args.directory:
        checker.logger.info("Checking directory %s",args.directory)
        
        filepathsIterator = FileSystemHelper.list_all_files(args.directory)
        
        reputationCheck = True
        
        if args.language == "R":
            print("Excluding repurtation checks for R Libs")
            reputationCheck = False
            
        print("Checking %d files", len(filepathsIterator))
        
        fileCheckResponse = checker.fileChecks(filepathsIterator, reputationCheck=reputationCheck)
        
        checker.writeReport(args.output, fileCheckResponse)

    if args.libraryname:
        checker.libraryReputationCheck(args.libraryname)
    
  
